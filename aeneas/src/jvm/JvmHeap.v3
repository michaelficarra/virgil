// Copyright 2011 Google Inc. All rights reserved.
// See LICENSE for details of Apache 2.0 license.

// Class that manages the representation of the Virgil heap when targeting the JVM.
class JvmHeap(jprog: JvmProgram) {
	def instrs = Vector<JvmHI>.new();
	var jvmRecords: Array<JvmHI_Record>;
	var heapBuilder: JvmClassfileBuilder;
	var fieldID: int;
	var recursionDepth = 0;

	new() {
		var name = jprog.mangleTypeName("V3H_", jprog.prog.getMain().receiver);
		var heapClass = JvmClass.new(name, JvmTypes.jlo);
		heapBuilder = JvmClassfileBuilder.new(jprog, heapClass);
		jvmRecords = Array<JvmHI_Record>.new(jprog.prog.recordCount);
	}
	def emitValue(code: JvmCodeBuilder, etype: Type, val: Val) -> int {
		match (etype.typeCon.kind) {
			BOOL =>		code.iconst(Bool.toInt(Bool.unbox(val)));
			ENUM_SET =>	emitIntValue(code, V3.getEnumSetType(etype), val);
			ENUM =>		emitIntValue(code, V3.getVariantTagType(etype), val);
			INT =>		emitIntValue(code, IntType.!(etype), val);
			FLOAT =>	emitFloatValue(code, FloatType.!(etype), val);
			ARRAY,
			VARIANT,
			CLASS =>	emitRecordValue(code, Record.!(val));
			ANYFUNC,
			FUNCREF =>	emitFunctionValue(code, etype, FuncVal.!(val));
			VOID,
			COMPONENT =>	; // emit nothing
		} else {
			var buf = StringBuilder.new().puts("unexpected value: ");
			V3.renderResult(val, etype, buf);
			buf.puts(" of type ");
			etype.render(buf);
			jprog.context.fail(buf.toString());
		}
		return 1;
	}
	private def emitIntValue(code: JvmCodeBuilder, tt: IntType, val: Val) {
		if (tt.size <= 4) code.iconst(V3.unboxI32(val));
		else code.lconst(Long.unboxSU(val, tt.signed));
	}
	private def emitFloatValue(code: JvmCodeBuilder, ft: FloatType, val: Val) {
		if (ft.is64) {
			code.dconst(if(val == null, 0, Float64Val.!(val).bits));
		} else {
			code.fconst(if(val == null, 0, Float32Val.!(val).bits));
		}
	}
	private def emitFunctionValue(code: JvmCodeBuilder, etype: Type, fval: FuncVal) {
		if (fval != null) {
			var jclass = jprog.newClosure(fval.memberRef);
			code.getstatic(jclass, "instance", jclass);
			var exactType = fval.memberRef.getFuncType();
			if (exactType != etype) emitFunctionConversion(code, exactType, etype);
		} else {
			code.aconst_null();
		}
	}
	private def emitRecordValue(code: JvmCodeBuilder, rval: Record) {
		if (rval != Values.BOTTOM) {
			var instr = visitRecord(rval, rval.rtype, null, 0);
			code.getstatic(heapBuilder.jclass, instr.fname, instr.jtype);
		} else {
			code.aconst_null();
		}
	}
	def emitJvmTypeConversion(code: JvmCodeBuilder, exactType: Type, implicitType: Type) {
		if (implicitType != exactType) {
			if (V3.isTuple(implicitType)) {
				// convert a tuple by deconstructing and reconstructing it
				emitTupleConversion(code, exactType, implicitType);
			} else if (V3.isFunction(implicitType) && exactType != Null.TYPE) {
				// convert a closure by wrapping it in a special invoker
				emitFunctionConversion(code, exactType, implicitType);
			} else if (V3.isClass(implicitType) || V3.isVariant(implicitType)) {
				if (!jprog.isSubclass(exactType, implicitType)) {
					// object type subsumption is implicit on the Jvm, except downcasts
					code.checkcast(jprog.jvmClass(implicitType));
				}
			}
			// (byte -> int) is implicit on the Jvm
		}
	}
	def emitTupleConversion(code: JvmCodeBuilder, exactType: Type, implicitType: Type) {
		var xt = Tuple.toTypeArray(exactType), it = Tuple.toTypeArray(implicitType);
		var tvar = code.max_locals++;
		code.store(JvmTypes.KIND_OBJECT, tvar);
		var xc = JvmClass.!(jprog.jvmType(exactType));
		var ic = JvmClass.!(jprog.jvmType(implicitType));
		code.newobject(ic);
		code.dup();
		for (i < xt.length) {
                        var fname = Strings.format1("f%d", i);
                        code.load(JvmTypes.KIND_OBJECT, tvar);
                        code.getfield(xc, fname, jprog.jvmType(xt[i]));
                        emitJvmTypeConversion(code, xt[i], it[i]);
		}
		var ftype = Function.newType(implicitType, implicitType);
		code.invokestatic(ic.name, "$new", jprog.jvmSig(ftype));
	}
	def emitFunctionConversion(code: JvmCodeBuilder, exactType: Type, implicitType: Type) {
		var adapter = jprog.newClosureAdapter(exactType, implicitType);
		code.invokestatic(adapter.builder.jclass.name, "$new", adapter.initSig);
	}
	def emit() {
		var clinit_method = heapBuilder.newMethod("<clinit>", "()V");
		var clinit_code = heapBuilder.newCodeBuilder();
		clinit_method.setFlag(true, JvmConstant.ACC_STATIC);
		var ovf_count = 0;

		var last_split_pos = -1; // the last position at which a split could occur
		var max_size = CLOptions.JVM_HEAP_INIT_METH_SIZE.val;
		for (j < instrs.length) {
			var pos = clinit_code.cur_pos;
			var i = instrs[j];
			if (i == null) { // null is used to signal a possible split point
				last_split_pos = pos;
				Terminal.put1("split? length=%d\n", clinit_code.cur_pos);
				continue;
			}
			Terminal.put3("emitInit %s stack=%d length=%d\n",
				nameOf(instrs[j]), clinit_code.cur_stack, clinit_code.cur_pos);
			i.emitInit(this, clinit_code);

			// Check if the code exceeds the maximum size and split the method if so.
			if (clinit_code.cur_pos > max_size) {
				Terminal.put1("splitting at length=%d\n", last_split_pos);
				// create an overflow method
				var name = StringBuilder.new().put1("clinit%d", ovf_count).toString();
				var ovf_method = heapBuilder.newMethod(name, "()V");
				ovf_method.setFlag(true, JvmConstant.ACC_STATIC);

				// Split previous method at last split point
				var ovf_code = clinit_code.splitAt(last_split_pos, 0);

				// Finish previous method
				clinit_code.invokestatic(heapBuilder.jclass.name, name, JvmTypes.SIG_VOID);
				clinit_code.retvoid();
				clinit_code.attach(clinit_method);

				// Switch to new method
				clinit_method = ovf_method;
				clinit_code = ovf_code;
			}
		}

		clinit_code.retvoid();
		clinit_code.attach(clinit_method);
		jprog.emitJvmClassfile(heapBuilder.file);
	}
	private def nameOf(i: JvmHI) -> string {
		match (i) {
			x: JvmHI_Value => return "val";
			x: JvmHI_NewArray => return "newarray";
			x: JvmHI_String => return "string";
			x: JvmHI_ArrayIndex => return "arrayindex";
			x: JvmHI_ArrayStore => return "arraystore";
			x: JvmHI_UselessArray => return "uselessarray";
			x: JvmHI_InitObject => return "initobject";
			x: JvmHI_Load => return "load";
			x: JvmHI_Record => return "record";
			x: JvmHI_Ref => return "ref";
		}
		return "unknown";
	}
	private def newField(prefix: string, ref: JvmHI_Ref, jtype: JvmType) {
		if (ref.fname == null) {
			ref.fname = Strings.format2("%s%d", prefix, fieldID++);
			var fld = heapBuilder.newField(ref.fname, jtype.descriptor());
			fld.setFlag(true, JvmConstant.ACC_STATIC);
		}
	}
	private def visitValue(val: Val, etype: Type, ref: JvmHI_Ref, index: int) {
		if (val == null) {
			instrs.put(JvmHI_Value.new(val, etype));
			return;
		}
		match (etype.typeCon.kind) {
			CLOSURE => jprog.context.fail("normalization should remove all closure values");
			TUPLE => jprog.context.fail("normalization should remove all tuple values");
			VARIANT,
			CLASS,
			ARRAY => match (val) {
				x: Record => visitRecord(x, etype, ref, index);
				x: FuncVal => instrs.put(JvmHI_Value.new(val, x.memberRef.getBoundType()));
			}
			_ => instrs.put(JvmHI_Value.new(val, etype));
		}
	}
	private def visitRecord(rval: Record, etype: Type, ref: JvmHI_Ref, index: int) -> JvmHI_Record {
		var prevDepth = recursionDepth++;
		if (rval.id >= jvmRecords.length) {
			jvmRecords = Arrays.grow(jvmRecords, rval.id + rval.id + 1);
		}
		var instr = jvmRecords[rval.id];
		if (instr != null) {
			if (instr.onstack) {
				// this reference created a cycle; record it; break the cycle with null
				addCycle(instr, ref, index);
				instrs.put(JvmHI_Value.new(Values.BOTTOM, etype));
			} else {
				// this is a reference to a previously initialized record; load it
				var load = JvmHI_Load.new(rval, jprog.jvmType(rval.rtype));
				newField("r", instr, instr.jtype);
				load.fname = instr.fname;
				instrs.put(load);
			}
		} else {
			instr = newRecord(rval);
			if (etype == AnyRef.TYPE) etype = rval.rtype;
			if (jprog.isUselessArray(etype)) visitUselessArray(instr, ref, index);
			else if (V3.isString(etype)) visitString(instr, ref, index);
			else if (V3.isArray(etype)) visitArray(instr, ref, index);
			else visitObject(instr, ref, index);
		}
		if (prevDepth == 0) instrs.put(null); // null indicates a possible split point
		recursionDepth = prevDepth;
		return instr;
	}
	private def addCycle(instr: JvmHI_Record, ref: JvmHI_Ref, index: int) {
		newField("c", ref, ref.jtype);
		instr.inner = true;
		instr.cycles = List.new(JvmHI_CycleRef.new(ref, index), instr.cycles);
	}
	private def visitUselessArray(instr: JvmHI_Record, ref: JvmHI_Ref, index: int) {
		instrs.put(JvmHI_UselessArray.new(instr, instr.rval.values.length));
		if (ref == null) newField("a", instr, instr.jtype);
		else instr.inner = true;
	}
	private def visitArray(instr: JvmHI_Record, ref: JvmHI_Ref, index: int) {
		var etype = V3Array.elementType(instr.rval.rtype);
		var jetype = jprog.jvmType(etype);
		var narray = JvmHI_NewArray.new(instr, jetype, instr.rval.values.length);
		instrs.put(narray);
		var values = instr.rval.values;
		for (i < values.length) {
			if (!Values.equal(values[i], Values.BOTTOM)) {
				// only initialize non-default array elements.
				instrs.put(JvmHI_ArrayIndex.new(i));
				visitValue(values[i], etype, instr, i);
				instrs.put(JvmHI_ArrayStore.new(jetype));
				instr.inner = true;
			}
		}
		if (ref == null) newField("a", instr, instr.jtype);
		else instr.inner = true;
	}
	private def visitString(instr: JvmHI_Record, ref: JvmHI_Ref, index: int) {
		// first check whether the string has any negative characters
		var values = instr.rval.values, str = Array<byte>.new(values.length);
		for (i < values.length) {
			var ch = Byte.unbox(values[i]);
			str[i] = ch;
			if (ch <= '\x00' || ch > '~') {
				// character out of range, cannot use string constant
				return visitArray(instr, ref, index);
			}
		}
		// emit the bytes as a string constant instead of a byte by byte init
		instrs.put(JvmHI_String.new(instr, str));
		if (ref == null) newField("s", instr, instr.jtype);
		else instr.inner = true;
	}
	private def visitObject(instr: JvmHI_Record, ref: JvmHI_Ref, index: int) {
		var ctype = instr.rval.rtype;
		var ic = jprog.prog.ir.getIrClass(ctype);
		var values = instr.rval.values;
		instr.onstack = true;
		for (i < values.length) {
			visitValue(values[i], ic.fields[i].fieldType, instr, i);
		}
		instr.onstack = false;
		instrs.put(JvmHI_InitObject.new(instr, "$heap", jprog.makeHeapSig(ctype)));
		if (ref == null) newField("o", instr, instr.jtype);
		else instr.inner = true;
	}
	private def newRecord(rval: Record) -> JvmHI_Record {
		var jtype = jprog.jvmType(rval.rtype);
		var jrecord = JvmHI_Record.new(rval, jtype);
		if (rval.id >= jvmRecords.length) {
			jvmRecords = Arrays.grow(jvmRecords, rval.id + 1);
		}
		jvmRecords[rval.id] = jrecord;
		return jrecord;
	}
}

class JvmHI {
	var fname: string;
	var inner: bool;
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder);
	def writeField(heap: JvmHeap, code: JvmCodeBuilder, jtype: JvmType) {
		if (fname != null) {
			if (inner) code.dup();
			code.putstatic(heap.heapBuilder.jclass, fname, jtype);
		}
	}
}

class JvmHI_Ref(jtype: JvmType) extends JvmHI {
	def emitRef(heap: JvmHeap, code: JvmCodeBuilder) {
		code.getstatic(heap.heapBuilder.jclass, fname, jtype);
	}
	def finishCycle(heap: JvmHeap, code: JvmCodeBuilder, index: int);
}

class JvmHI_Value(val: Val, vtype: Type) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		heap.emitValue(code, vtype, val);
	}
}

class JvmHI_NewArray extends JvmHI_Ref {
	def rec: JvmHI_Record;
	def length: int;
	new(rec, jtype: JvmType, length) super(jtype) { }
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.iconst(length);
		code.newarray(jtype);
		rec.writeField(heap, code, rec.jtype);
	}
	def finishCycle(heap: JvmHeap, code: JvmCodeBuilder, index: int) {
		// arrays don't form cycles because they can be allocated before their elements.
	}
}

class JvmHI_String(rec: JvmHI_Record, str: Array<byte>) extends JvmHI_Ref(JvmTypes.CHAR) {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.ldc(heap.heapBuilder.newString(str));
		code.invokevirtual(JvmTypes.java_lang_String.name, "getBytes", JvmTypes.SIG_VOID_BYTE_ARRAY);
		rec.writeField(heap, code, rec.jtype);
	}
	def finishCycle(heap: JvmHeap, code: JvmCodeBuilder, index: int) {
		// strings can't form cycles.
	}
}

class JvmHI_ArrayIndex(index: int) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.dup();
		code.iconst(index);
	}
}

class JvmHI_ArrayStore(jtype: JvmType) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.astore(jtype.kind);
	}
}

class JvmHI_UselessArray(rec: JvmHI_Record, length: int) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.newobject(JvmTypes.java_lang_Integer);
		code.dup();
		code.iconst(length);
		code.invokespecial(JvmTypes.java_lang_Integer.name, "<init>", JvmTypes.SIG_INT_VOID);
		rec.writeField(heap, code, rec.jtype);
	}
}

class JvmHI_InitObject(rec: JvmHI_Record, mname: string, sig: JvmSig) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.invokestatic(rec.jtype.name, mname, sig);
		rec.writeField(heap, code, rec.jtype);
		for (cycles = rec.cycles; cycles != null; cycles = cycles.tail) {
			cycles.head.instr.finishCycle(heap, code, cycles.head.index);
		}
	}
}

class JvmHI_Load(rval: Record, jtype: JvmType) extends JvmHI {
	def emitInit(heap: JvmHeap, code: JvmCodeBuilder) {
		code.getstatic(heap.heapBuilder.jclass, fname, jtype);
	}
}

class JvmHI_Record extends JvmHI_Ref {
	def rval: Record;
	var onstack: bool;
	var cycles: List<JvmHI_CycleRef>;
	new(rval, jtype: JvmType) super(jtype) { }
	def finishCycle(heap: JvmHeap, code: JvmCodeBuilder, index: int) {
		code.dup();
		if (V3.isClass(rval.rtype)) {
			// an object; emit a write to the appropriate field
			emitRef(heap, code);
			var ic = heap.jprog.prog.ir.getIrClass(rval.rtype);
			var f = ic.fields[index];
			var ftype = heap.jprog.jvmClass(f.fieldType);
			code.swap();
			code.putfield(JvmClass.!(jtype), V3.mangleIrMember(f), ftype);
		} else {
			// an array; emit a write to the appropriate array element
			emitRef(heap, code);
			code.swap();
			code.iconst(index);
			code.swap();
			code.astore(JvmTypes.KIND_OBJECT);
		}
	}
}

class JvmHI_CycleRef(instr: JvmHI_Ref, index: int) { }
